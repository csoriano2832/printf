.TH _PRINTF 3 2021-03-16 GNU

.SH NAME
_printf \- formatted output conversion

.SH SYNOPSIS
.B #include "holberton.h"

.B int _printf(const char *\fIformat\fR, ...);

.SH DESCRIPTION
The functions in \fB_printf\fR() produce output according to a 
\fIformat\fR as described below. The function writes output to 
\fIstdout\fR, the standard output stream.

This function writes the output under the control of a \fIformat\fR
string that specifies how a subsequent argument is converted for output.

.TP
.B Return value
Upon successful return, this function return the number of characters
printed (excluding the null byte used to end output to stings).

If an output error is encountered, a negative value is returned.

.TP
.B Format of the format string
The format string is a character string, beginning and ending in its
initial shift state, if any. The format string is composed of zero or more
directives: ordinary characters (not %), which are copied unchanged to the
output stream; and conversion specifications, each of which results in
fetching zero or more subsequent arguments. Each conversion specification
is introduced by the character %, and ends with a \fIconversion specifier\fR
.

The arguments must correspond properly with the conversion specifier.

.TP
.B The conversion specifier
A character that specifies the type of conversion to be applied. The
conversion specifiers and their meanings are:

.TP
.BR d ", " i
The int argument is converted to signed decimal notation.

.TP
.BR o ", " u ", " x ", " X
The \fIunsigned int\fR argument is converted to unsigned octal (\fBo\fR), 
unsigned decimal (\fBu\fR), or unsigned hexadecimal (\fBx\fR and \fBX\fR) 
notation. The letters \fBabcdef\fR are used for x conversions; the letters 
\fBABCDEF\fR are used for X conversions

.TP
.B c
The \fIint\fR argument is converted to an \fIunsigned char\fR, and the
resulting character is written.

.TP
.B s
The \fI const char *\fR argument is expected to be a pointer to an array
of character type. Characters from the array are written up to (but not
including) a terminating null byte ('\0').

.TP
.B b
The \fIunsigned int\fR argument is converted to unsigned binary notation.

.TP
.B R
The \fIchar *\fR argument is expected to be a pointer to an array of
character type. Each character from the array up to (but not including) 
the terminating null byte is encoded using ROT13 encryption before being 
written to \fIstdout\fR.

.TP
.B %
A '%' is written. No argument is converted. The complete conversion
specification is '%%'.

.SH CONFORMING TO
The \fB_printf\fR() function conforms to C89 and C99.

.SH NOTES
If the character '%' is the only or the last character in the format string
that character will not be printed and the value returned by the function will
be -1.

.SH BUGS
No bugs have been reported at the moment of writing this man page. 

.SH EXAMPLE
To print a character:

	_printf("%c", 'x');

To print a string:

	_printf("%s", "Hello, world!");

To print an integer:

	_printf("%i", 123);

	OR

	_printf("%d", 123);
